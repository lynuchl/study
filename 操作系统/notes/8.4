1.同一时间间隔(并发);同一时刻(并行)。

2.从汇编角度, 操作系统和程序是什么关系？
  这个问题里面包含了三个因素：汇编，操作系统和程序。实际上还有另外一个因素是隐藏的，那就是计算机硬件本身。这个问题的主题本质上就是要讨论这几种东西之间的关系了。那么下面就来简单说一下。
  (1).计算机硬件：计算机硬件包含很多部件，但是这个问题里面要讨论的东西显然就是用于执行程序的CPU了。那么这里就单讨论CPU。从CPU的角度来讲，我们要认清一个事实：计算机的CPU只能执行二进制的机器码，
  形式上也就是一串一串0和1的组合。CPU不认识C语言，不认识Java，不认识PHP，不认识JavaScript，只认识0和1组成的机器码。另外需要说明的是，机器码的格式是和CPU的种类高度相关的，不同品牌的CPU的机器码
  是完全不一样的，相互之间无法通用。比如电脑用Intel的CPU，那么Intel架构下面的机器码如果放到手机设备常用的ARM架构的CPU里是完全无法执行的，就是这个道理。

  (2). 汇编语言： 汇编语言其实是一种为了帮助程序员阅读和书写机器码的语言。比如有一段16位机器码：0000000100010010，我们假设前8位二进制代表移动操作，9-12位表示目标寄存器编号，13-16位表示
  源寄存器编号，我们就能知道这串代码的含义是把2号寄存器的内容移动到1号寄存器。但是这样的形式对于人类来说很不直观，不过如果我们把前8位用MOV三个字母代替，把1号寄存器叫做AX，2号寄存器叫做BX的话，
  那么这段代码就可以翻译成:MOV AX, BX 。这样看上去就比一串数字要有好多了。这就是汇编语言的来历。汇编语言其实是机器码的一种简单对应转化，起到帮助人类记忆和阅读的作用。汇编语言不需要编译器，
  只需要简单翻译一下就好，其本质还是机器码。

  (3). 程序:程序是指计算机能够执行的一段代码的集合。从计算机硬件（CPU），也就是题主说的“裸机”的角度来讲，程序的内容就是也只能是二进制的机器码。至于人类写程序的时候用的是什么语言，C语言？Java？C++？
  PHP？汇编？无论哪一种语言，最终都会通过某种形式转换成机器码后在CPU上执行。注意：操作系统本身也是一个程序。
  
  (4). 操作系统:操作系统产生是为了让人类能够更方便、有效地利用计算机而开发出来的一种程序。操作系统提供了很多便捷的功能，让人类能够高效地读写计算机文件，放音乐，打游戏；操作系统还提供了很多有用的功能
  接口（API），让其他程序员能够基于操作系统上开发更多有意思的程序。但是无论如何，操作系统的本质还是一大堆二进制机器码的集合。操作系统绝对不是计算机运行程序的必要条件。只要程序员能写出有效的机器码并
  送入CPU，计算机就能执行程序，根本就不一定需要操作系统。举个例子：1960——1970年代的很多科研用计算机程序就是把程序员把机器码写好，然后通过打孔的形式把机器码记录在纸带上，在让计算机通过纸带读取器把
  机器码读入CPU执行的，从头到尾根本没有操作系统什么事儿，那个年代也根本没有操作系统。
  
  总结回答:首先问题中说的从“汇编”的角度，我揣测题主是要表达的是“从CPU能运行的最本质代码的角度"这个意思，所以“汇编”应改成“机器码”比较合适；题主对CPU运行程序的机理是有认识的，但是没有明确说出“CPU运行
  程序就是运行二进制机器码”这个观点；      其次题主提出的核心问题：操作系统和程序的关系，理论上CPU并不需要操作系统才能运行程序，只要能把一段二进制机器码输入CPU程序就能运行。不过，为了操作的方便性
  ，目前现实生活中99.99%的计算机硬件架构都有匹配的操作系统可以运行，单方面追求越过操作系统让CPU直接执行程序没什么意义。所以绝大部分程序都是基于操作系统开发的，程序中调用了操作系统提供的应用程序接口
  （API），这就从客观上造成了程序对操作系统的依赖。既然有了依赖，那么就必须要让操作系统先运行起来，程序才能正常工作。 至于题主关心的程序在编译以后是否包含着操作系统的机器码（题主写的是汇编，但是应
  该是机器码才合适）的问题，其实程序本身没必要把系统级的机器码包含进来。在计算机编程中一个很重要的概念是“调用”。既然操作系统已经提供了现成的二进制代码可用，那么程序在自己的二进制代码里只要做一个CALL指令
  ，然后跳转到操作系统指定的功能入口地址即可。如果没一个程序在调用系统功能的时候都要把二进制代码包含进来，那么程序就会变得非常臃肿了。

3.并发和共享是操作系统的最基本的特征，互斥共享方式;同时访问方式;

